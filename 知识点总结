HTML只负责语义的表述，如问及h1标签做了什么，回答语义表述

超链接href绝对路径+相对路径，既可以跳转其他页面，也可以跳转到当前页面指定位置，#符号表示指定位置跳转

图片src注意路径的书写，绝对路径+相对路径，其中相对路径是用..表示的，绝对路径是可以用网页表示

导航栏的写法可以用ul，定义列表是dl

inframe的写法src

ratio单选注意name属性的一致性 checkbox多选框 select-option

块状元素想要重置居中，注意height与padding，margin的偶数定理，行内元素想要居中，注意fontsize与lineheight的关系

块状盒子居中 margin 0 auto且确定width 文本居中textalign center

伪类状态的书写顺序 love-hate love:link visited hate:hover active hate&focus对所有的元素都适用

继承所带来的样式改变权值为0

border的属性一定要写全

当子元素在父元素中时，要善于利用父亲的padding or 子元素的border，而不是子元素的margin间隔双方，注意margin本质上还是两个兄弟元素之间的距离

基本数据类型+引用数据类型(非五大类，即object) 基本是存储在栈之中，引用是存储在堆之中，引用存储的是地址，所以改变一个值另一引用值也会随之改变

fn()与fn的区别：fn()是调用函数，fn是函数本身

this关键字指定了调用对象，window调用函数，对象调用方法，创建对象调用构造方法

调用函数时，浏览器隐性携带两个参数 arguments 和this argument是用于封装实参

json和对象的区别

阻止事件冒泡

内存泄漏的几个诱因：1.意外定义了全局变量，即没有在变量前加上var 
2.闭包对象在使用后没有及时注销 fn = null 3.定时器在使用后没有及时注销 clearInterval(intervalId)

基本对象的拷贝类似于深拷贝，真正地创建了一个全新的对象；引用对象(非五大类，即object)的拷贝属于浅拷贝，仅仅创建了一个引用地址
基础的深拷贝可使用json的转化函数，完整的深拷贝可以使用JQuery

抓住对象可以自加属性的特征，注意封装函数的一个方法即用element代替document

动态创建DOM元素的三种方式
document.write(); 不常用，因为容易覆盖原来的页面。
innerHTML = (); 用的比较多。绑定属性和内容比较方便。(节点套节点) insertAdjHTML
document.createElement(); 用得也比较多，指定数量的时候一般用它。

搜索框提示功能的实现

setInterval()：循环定时器。周而复始的执行（循环执行）
setTimeout()：定时炸弹。用完以后立刻报废（只执行一次）

使用 jQuery 的基本步骤
（1）引包（2）入口函数（3）功能实现代码（事件处理）
jQuery 的入口函数，可以出现任意多次，并不存在事件覆盖问题
$(); // 调用上面我们自定义的函数$
$(document）.ready(function(){}); // 调用入口函数
$(function(){}); // 调用入口函数
$(“#btnShow”) // 获取id属性为btnShow的元素
$(“div”) // 获取所有的div标签元素
jQuery对象和DOM 对象可以互相转换

CSS盒模型和IE盒模型的区别在于对width和height的理解
在css中采用box-sizing属性指定采用哪种盒模型，content-box表示width和height仅包含content(css模型)
border-box表示width包含padding，border(IE盒模型)，但是不包括margin

js获取dom节点样式的注意点
elememt.style.width/height 这种方法是有局限性的，仅能获得内部样式，无法获得外联or内嵌样式
window.getComputedStyle(element).width/height 建议用这种

BFC概念 https://github.com/Ye-Nazhou/Web-1/blob/master/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/02-CSS%E7%9B%92%E6%A8%A1%E5%9E%8B%E5%8F%8ABFC.md

DOM事件模型 0 2 3  DOM事件流分成三个阶段
（1）捕获：从 window 对象传到目标元素。
（2）目标阶段：事件通过捕获，到达目标元素，这个阶段就是目标阶段。
（3）冒泡：从目标元素传到 Window 对象。

event.setAttribute可以用于获得仁义元素的任一属性

event.currentTarget   //当前所绑定的事件对象。在事件委托中，指的是【父元素】。
event.target  //当前被点击的元素。在事件委托中，指的是【子元素】。

CSS编程化，即less与sass的使用

CSS命名规范BEM block_element block--modifier

BFC Block Formatting Contexts 即容器内部的子元素无法影响到容器外部的元素

响应式设计——flexbox + 媒体查询

call和apply方法均是用于改变this的指向，第一个参数为this指向对象，其余以参数形式或者arguments形式进行传递

JavaScript模块化规范。用多种方式来描述JavaScript中多个库或者类之间的交互方式,如exports和requires

Bootstrap网格系统 样式库

Node编程特征 异步执行 事件驱动 单线程
node具有REPL模式(read- eval- print loop)即node的shell无参命令行
node所有的异步IO操作在完成时都会发送一个事件到事件队列中，所有的事件都是由EventEmitter对象提供
即 fs.readFile 和 http.createServer 的回调函数都是通过 EventEmitter 来实现的
事件循环
Node.js 在主线程里维护了一个事件队列，当接到请求后，就将该请求作为一个事件放入这个队列中，然后继续接收其他请求。
当主线程空闲时(没有请求接入时)，就开始循环事件队列，检查队列中是否有要处理的事件
这时要分两种情况：如果是非 I/O 任务，就及时处理，并通过回调函数返回到上层调用
如果是 I/O 任务，阻塞线程并指定回调函数，然后继续循环队列中的其他事件。
当线程中的 I/O 任务完成以后，就执行指定的回调函数，并把这个完成的事件放到事件队列的尾部，等待事件循环，当主线程再次循环到该事件时，就直接处理并返回给上层调用。 
这个过程就叫事件循环

HTTP/TCP内容https://www.jianshu.com/p/6e9e4156ece3

NaN 任何数值除以0都会返回NaN isNaN在接收到一个值之后会将其转换为数值，如"10"返回false 而"blue"返回true
undefined和null之间的关系 undefined源自于null 因此undefined == null返回true，undefined是变量已经创建了但是还没有赋值，null是一个指向空对象的指针
如果想要进行垃圾回收，可以将变量赋值给null，这样在离开变量的环境时会自动将其回收
函数赋值的时候注意是传递值，基本类型变量会直接新建一个变量因此原来的不会改变，而引用类型变量会发生变化，注意记忆红宝书中将引用赋值后再新建对象的情况，由于传递的是指而不是引用，
因此再一次赋值不会改变变量的指向


对于基本类型的数据可以用typeof判断，对于引用类型数据可以用instanceof判断

nodeType 元素节点1 属性节点2 文本节点3

无论什么时候，只要利用查询函数查询dom结点，都会查询整棵dom树以寻找可能符合要求的结点








