链路层——网络层——传输层——应用层
TCP/IP指的就是互联网相关的各类协议族的总称，当然有时也特指TCP和IP两大协议
协议族将层次进行分层就是为了在方便各个层的管理更改，各层之间用接口连接

应用层——各类应用服务，如HTTP,FTP,DNS DNS是域名解析服务
传输层——TCP UDP TCP是可靠的字节流服务，它会将HTTP报文分割成多个报文段
网络层——IP 规定了通过怎样的路径达到对方计算机并将数据包抄送给对方
链路层——硬件设备

IP指的是协议，而IP地址指的是节点被分配到的地址，MAC地址时网卡所被分配到的地址。IP地址是可以变换的，而MAC地址无法变化
TCP采用的是三次握手原则，用到了TCP的标志 SYN(synchronize同步的)和ACK(acknowledgement)
发送端首先发送一个带 SYN 标志的数据包给对方。接收端收到后，回传一个带有 SYN/ACK 标志的数据包以示传达确认信息。最后，发
送端再回传一个带 ACK 标志的数据包，代表“握手”结束。

HTTP协议是无状态协议，它不会保存之前的内容，如登录淘宝网站后更新就无法保持登录状态
为了实现保持状态，可以引用cookie技术
cookie技术是由服务器发出的响应报文中带有的，由客户端自动保存(服务器需要记录cookie发送给了哪个客户端)
接下来客户端发送新的报文时会将cookie自动发出，服务器收到之后会和记录进行对照，从而知道了之间的状态信息

在原先版本的HTTP连接中，每进行一次HTTP通信都需要断开重新连接一次TCP，即三次握手后再次断开
建立TCP连接——HTTP请求/响应——断开TCP连接
为了解决连接问题，后来的协议中创建了持久连接的方法(持久的是TCP连接而非HTTP连接)
持久连接也带来了管线化的进步，即可以发送多次HTTP请求而不需要等待回复后才进行下一次请求

请求报文包括报文首部+空行+报文主体，其中报文主体不一定存在，首部包括请求行/相应行+请求头/响应头
通常而言报文主体就是所发送的实体主体，当然有时候可能经过编码进行压缩处理

网关 代理 隧道
代理就是转发，转发时会附加via(via proxy1 proxy2等)
网关使得通信线路上的服务能够提供非HTTP协议服务
隧道时用于建立远距离的服务器安全通信

保存资源的缓存
缓存是指代理服务器或者客户端本地磁盘所保存的资源副本，当代理转发从服务器返回的响应时，
缓存服务器会保存一份资源的副本。当然缓存是有期限的，超过期限无论是缓存代理or客户端本地的缓存都会被清理

HTTP + 加密 + 认证 + 完整性保护 = HTTPS
HTTP原先是和TCP直接进行连接，而HTTPs是先和SSL进行连接后再传给TCP
SSL使用的是公开密钥加密技术

对于HTTP请求而言，是有一定局限性导致其无法及时更新
在微博等及时更新的网站中，就算是实时更新也会因为服务器未有新内容而浪费资源
一条连接上之可发送一个请求  请求只能从客户端发起，且客户端无法接受除了响应以外的任何指令
现采用Ajax技术，即局部web页面替换加载的异步通信技术，只需要更新一部分页面因此节省大量资源
但是Ajax仍需要进行多次地请求因此也还有瓶颈

引入了websocket技术，一旦web服务器和客户端之间建立起了连接，所有的通信都依赖这个专用协议进行，通信过程中可以互相发送任意格式的数据
由于仍是建立在HTTP基础上的协议，因此连接的发起方依旧是客户端，但是连接后任意双方都可以随时向对方发送报文
第一步是先建立HTTP连接（经历TCP三次握手后建立），后再握一次手成功建立websocket
协议主要特点：1.推送功能，即支持服务器向客户端推送数据，服务器可以直接发送数据而不需要等待客户端的请求
2.减少通信量，一旦连接成功后就会一直保持连接状态

websocket和socket没有什么关系
websocket是一种协议，依赖于HTTP，是HTTP的升级版
socket是接口，位于应用层和服务层之间

同步异步是对于操作结果而言的，即会不会等待结果返回
阻塞非阻塞是对于线程而言的，即线程是否会进入阻塞状态
两对名词的表现形式相同，但是其修饰对象不同

